// Code generated by mockery v1.0.0. DO NOT EDIT.

package user

import (
	models "github.com/artem-malko/auth-and-go/models"
	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// MockManager is an autogenerated mock type for the Manager type
type MockManager struct {
	mock.Mock
}

// ConfirmRegistration provides a mock function with given fields: confirmationToken
func (_m *MockManager) ConfirmRegistration(confirmationToken uuid.UUID) (*models.User, *models.SessionTokens, error) {
	ret := _m.Called(confirmationToken)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(uuid.UUID) *models.User); ok {
		r0 = rf(confirmationToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 *models.SessionTokens
	if rf, ok := ret.Get(1).(func(uuid.UUID) *models.SessionTokens); ok {
		r1 = rf(confirmationToken)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.SessionTokens)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(uuid.UUID) error); ok {
		r2 = rf(confirmationToken)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ContinueWithOAuth provides a mock function with given fields: params
func (_m *MockManager) ContinueWithOAuth(params ContinueWithOAuthParams) (*models.SessionTokens, error) {
	ret := _m.Called(params)

	var r0 *models.SessionTokens
	if rf, ok := ret.Get(0).(func(ContinueWithOAuthParams) *models.SessionTokens); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.SessionTokens)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ContinueWithOAuthParams) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUserWithEmail provides a mock function with given fields: email, password, clientID
func (_m *MockManager) CreateUserWithEmail(email string, password string, clientID models.ClientID) error {
	ret := _m.Called(email, password, clientID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, models.ClientID) error); ok {
		r0 = rf(email, password, clientID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteExpiredRegistrationConfirmations provides a mock function with given fields:
func (_m *MockManager) DeleteExpiredRegistrationConfirmations() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteExpiredSessions provides a mock function with given fields:
func (_m *MockManager) DeleteExpiredSessions() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteExpiredToken provides a mock function with given fields: tokenType
func (_m *MockManager) DeleteExpiredToken(tokenType models.TokenType) error {
	ret := _m.Called(tokenType)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.TokenType) error); ok {
		r0 = rf(tokenType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSessionBySessionID provides a mock function with given fields: sessionID
func (_m *MockManager) DeleteSessionBySessionID(sessionID uuid.UUID) error {
	ret := _m.Called(sessionID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(sessionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUsedTokens provides a mock function with given fields:
func (_m *MockManager) DeleteUsedTokens() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUserByID provides a mock function with given fields: userID
func (_m *MockManager) DeleteUserByID(userID uuid.UUID) error {
	ret := _m.Called(userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetFullUser provides a mock function with given fields: userID
func (_m *MockManager) GetFullUser(userID uuid.UUID) (*models.User, error) {
	ret := _m.Called(userID)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(uuid.UUID) *models.User); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSessionByAccessToken provides a mock function with given fields: accessToken
func (_m *MockManager) GetSessionByAccessToken(accessToken uuid.UUID) (*models.Session, error) {
	ret := _m.Called(accessToken)

	var r0 *models.Session
	if rf, ok := ret.Get(0).(func(uuid.UUID) *models.Session); ok {
		r0 = rf(accessToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Session)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByID provides a mock function with given fields: userID
func (_m *MockManager) GetUserByID(userID uuid.UUID) (*models.User, error) {
	ret := _m.Called(userID)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(uuid.UUID) *models.User); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByName provides a mock function with given fields: userName
func (_m *MockManager) GetUserByName(userName string) (*models.User, error) {
	ret := _m.Called(userName)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(string) *models.User); ok {
		r0 = rf(userName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginWithEmailAndPassword provides a mock function with given fields: email, password, clientIP, clientID
func (_m *MockManager) LoginWithEmailAndPassword(email string, password string, clientIP string, clientID models.ClientID) (*models.User, *models.SessionTokens, error) {
	ret := _m.Called(email, password, clientIP, clientID)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(string, string, string, models.ClientID) *models.User); ok {
		r0 = rf(email, password, clientIP, clientID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 *models.SessionTokens
	if rf, ok := ret.Get(1).(func(string, string, string, models.ClientID) *models.SessionTokens); ok {
		r1 = rf(email, password, clientIP, clientID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.SessionTokens)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string, string, models.ClientID) error); ok {
		r2 = rf(email, password, clientIP, clientID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RefreshSession provides a mock function with given fields: refreshToken
func (_m *MockManager) RefreshSession(refreshToken uuid.UUID) (*models.SessionTokens, error) {
	ret := _m.Called(refreshToken)

	var r0 *models.SessionTokens
	if rf, ok := ret.Get(0).(func(uuid.UUID) *models.SessionTokens); ok {
		r0 = rf(refreshToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.SessionTokens)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(refreshToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAccountName provides a mock function with given fields: userID, name
func (_m *MockManager) UpdateAccountName(userID uuid.UUID, name string) error {
	ret := _m.Called(userID, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) error); ok {
		r0 = rf(userID, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
