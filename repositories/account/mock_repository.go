// Code generated by mockery v1.0.0. DO NOT EDIT.

package account

import (
	database "github.com/artem-malko/auth-and-go/infrastructure/database"
	mock "github.com/stretchr/testify/mock"

	models "github.com/artem-malko/auth-and-go/models"

	uuid "github.com/google/uuid"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// ConfirmAccount provides a mock function with given fields: accountID, executor
func (_m *MockRepository) ConfirmAccount(accountID uuid.UUID, executor database.QueryExecutor) (*models.Account, error) {
	ret := _m.Called(accountID, executor)

	var r0 *models.Account
	if rf, ok := ret.Get(0).(func(uuid.UUID, database.QueryExecutor) *models.Account); ok {
		r0 = rf(accountID, executor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID, database.QueryExecutor) error); ok {
		r1 = rf(accountID, executor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAccount provides a mock function with given fields: account, executor
func (_m *MockRepository) CreateAccount(account models.Account, executor database.QueryExecutor) (*models.Account, error) {
	ret := _m.Called(account, executor)

	var r0 *models.Account
	if rf, ok := ret.Get(0).(func(models.Account, database.QueryExecutor) *models.Account); ok {
		r0 = rf(account, executor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.Account, database.QueryExecutor) error); ok {
		r1 = rf(account, executor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeactivateAccountByID provides a mock function with given fields: accountID, executor
func (_m *MockRepository) DeactivateAccountByID(accountID uuid.UUID, executor database.QueryExecutor) error {
	ret := _m.Called(accountID, executor)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, database.QueryExecutor) error); ok {
		r0 = rf(accountID, executor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUnconfirmedAccountsByAccountIDs provides a mock function with given fields: accountIDs, executor
func (_m *MockRepository) DeleteUnconfirmedAccountsByAccountIDs(accountIDs []uuid.UUID, executor database.QueryExecutor) error {
	ret := _m.Called(accountIDs, executor)

	var r0 error
	if rf, ok := ret.Get(0).(func([]uuid.UUID, database.QueryExecutor) error); ok {
		r0 = rf(accountIDs, executor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAccountByID provides a mock function with given fields: accountID, executor
func (_m *MockRepository) GetAccountByID(accountID uuid.UUID, executor database.QueryExecutor) (*models.Account, error) {
	ret := _m.Called(accountID, executor)

	var r0 *models.Account
	if rf, ok := ret.Get(0).(func(uuid.UUID, database.QueryExecutor) *models.Account); ok {
		r0 = rf(accountID, executor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID, database.QueryExecutor) error); ok {
		r1 = rf(accountID, executor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountByName provides a mock function with given fields: accountName, executor
func (_m *MockRepository) GetAccountByName(accountName string, executor database.QueryExecutor) (*models.Account, error) {
	ret := _m.Called(accountName, executor)

	var r0 *models.Account
	if rf, ok := ret.Get(0).(func(string, database.QueryExecutor) *models.Account); ok {
		r0 = rf(accountName, executor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, database.QueryExecutor) error); ok {
		r1 = rf(accountName, executor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountsByIDsList provides a mock function with given fields: ids, executor
func (_m *MockRepository) GetAccountsByIDsList(ids []uuid.UUID, executor database.QueryExecutor) ([]*models.Account, error) {
	ret := _m.Called(ids, executor)

	var r0 []*models.Account
	if rf, ok := ret.Get(0).(func([]uuid.UUID, database.QueryExecutor) []*models.Account); ok {
		r0 = rf(ids, executor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]uuid.UUID, database.QueryExecutor) error); ok {
		r1 = rf(ids, executor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginAccount provides a mock function with given fields: account, clientIP, executor
func (_m *MockRepository) LoginAccount(account uuid.UUID, clientIP string, executor database.QueryExecutor) (*models.Account, error) {
	ret := _m.Called(account, clientIP, executor)

	var r0 *models.Account
	if rf, ok := ret.Get(0).(func(uuid.UUID, string, database.QueryExecutor) *models.Account); ok {
		r0 = rf(account, clientIP, executor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID, string, database.QueryExecutor) error); ok {
		r1 = rf(account, clientIP, executor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAccountName provides a mock function with given fields: accountID, name, executor
func (_m *MockRepository) UpdateAccountName(accountID uuid.UUID, name string, executor database.QueryExecutor) error {
	ret := _m.Called(accountID, name, executor)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, string, database.QueryExecutor) error); ok {
		r0 = rf(accountID, name, executor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
