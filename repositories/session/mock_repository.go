// Code generated by mockery v1.0.0. DO NOT EDIT.

package session

import (
	database "github.com/artem-malko/auth-and-go/infrastructure/database"
	mock "github.com/stretchr/testify/mock"

	models "github.com/artem-malko/auth-and-go/models"

	uuid "github.com/google/uuid"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// CreateSession provides a mock function with given fields: session, executor
func (_m *MockRepository) CreateSession(session models.Session, executor database.QueryExecutor) error {
	ret := _m.Called(session, executor)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Session, database.QueryExecutor) error); ok {
		r0 = rf(session, executor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAllSessionsByAccountID provides a mock function with given fields: accountID, executor
func (_m *MockRepository) DeleteAllSessionsByAccountID(accountID uuid.UUID, executor database.QueryExecutor) error {
	ret := _m.Called(accountID, executor)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, database.QueryExecutor) error); ok {
		r0 = rf(accountID, executor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteExpiredSessions provides a mock function with given fields: executor
func (_m *MockRepository) DeleteExpiredSessions(executor database.QueryExecutor) error {
	ret := _m.Called(executor)

	var r0 error
	if rf, ok := ret.Get(0).(func(database.QueryExecutor) error); ok {
		r0 = rf(executor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSessionBySessionID provides a mock function with given fields: sessionID, executor
func (_m *MockRepository) DeleteSessionBySessionID(sessionID uuid.UUID, executor database.QueryExecutor) error {
	ret := _m.Called(sessionID, executor)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, database.QueryExecutor) error); ok {
		r0 = rf(sessionID, executor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSessionByAccessToken provides a mock function with given fields: accessToken, executor
func (_m *MockRepository) GetSessionByAccessToken(accessToken uuid.UUID, executor database.QueryExecutor) (*models.Session, error) {
	ret := _m.Called(accessToken, executor)

	var r0 *models.Session
	if rf, ok := ret.Get(0).(func(uuid.UUID, database.QueryExecutor) *models.Session); ok {
		r0 = rf(accessToken, executor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Session)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID, database.QueryExecutor) error); ok {
		r1 = rf(accessToken, executor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSessionByRefreshToken provides a mock function with given fields: refreshToken, accessTokenExpiresDate, refreshTokenExpiresDate, executor
func (_m *MockRepository) UpdateSessionByRefreshToken(refreshToken uuid.UUID, accessTokenExpiresDate string, refreshTokenExpiresDate string, executor database.QueryExecutor) (*models.Session, error) {
	ret := _m.Called(refreshToken, accessTokenExpiresDate, refreshTokenExpiresDate, executor)

	var r0 *models.Session
	if rf, ok := ret.Get(0).(func(uuid.UUID, string, string, database.QueryExecutor) *models.Session); ok {
		r0 = rf(refreshToken, accessTokenExpiresDate, refreshTokenExpiresDate, executor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Session)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID, string, string, database.QueryExecutor) error); ok {
		r1 = rf(refreshToken, accessTokenExpiresDate, refreshTokenExpiresDate, executor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
