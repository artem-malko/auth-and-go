// Code generated by mockery v1.0.0. DO NOT EDIT.

package token

import (
	database "github.com/artem-malko/auth-and-go/infrastructure/database"
	mock "github.com/stretchr/testify/mock"

	models "github.com/artem-malko/auth-and-go/models"

	uuid "github.com/google/uuid"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: token, executor
func (_m *MockRepository) Create(token models.Token, executor database.QueryExecutor) (uuid.UUID, error) {
	ret := _m.Called(token, executor)

	var r0 uuid.UUID
	if rf, ok := ret.Get(0).(func(models.Token, database.QueryExecutor) uuid.UUID); ok {
		r0 = rf(token, executor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.Token, database.QueryExecutor) error); ok {
		r1 = rf(token, executor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteExpiredTokens provides a mock function with given fields: tokenType, executor
func (_m *MockRepository) DeleteExpiredTokens(tokenType models.TokenType, executor database.QueryExecutor) ([]*models.Token, error) {
	ret := _m.Called(tokenType, executor)

	var r0 []*models.Token
	if rf, ok := ret.Get(0).(func(models.TokenType, database.QueryExecutor) []*models.Token); ok {
		r0 = rf(tokenType, executor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Token)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.TokenType, database.QueryExecutor) error); ok {
		r1 = rf(tokenType, executor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUsedTokens provides a mock function with given fields: executor
func (_m *MockRepository) DeleteUsedTokens(executor database.QueryExecutor) error {
	ret := _m.Called(executor)

	var r0 error
	if rf, ok := ret.Get(0).(func(database.QueryExecutor) error); ok {
		r0 = rf(executor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTokensByIdentityID provides a mock function with given fields: identityID, tokenType, executor
func (_m *MockRepository) GetTokensByIdentityID(identityID uuid.UUID, tokenType models.TokenType, executor database.QueryExecutor) ([]*models.Token, error) {
	ret := _m.Called(identityID, tokenType, executor)

	var r0 []*models.Token
	if rf, ok := ret.Get(0).(func(uuid.UUID, models.TokenType, database.QueryExecutor) []*models.Token); ok {
		r0 = rf(identityID, tokenType, executor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Token)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID, models.TokenType, database.QueryExecutor) error); ok {
		r1 = rf(identityID, tokenType, executor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatus provides a mock function with given fields: tokenID, tokenStatus, executor
func (_m *MockRepository) UpdateStatus(tokenID uuid.UUID, tokenStatus models.TokenStatus, executor database.QueryExecutor) (*models.Token, error) {
	ret := _m.Called(tokenID, tokenStatus, executor)

	var r0 *models.Token
	if rf, ok := ret.Get(0).(func(uuid.UUID, models.TokenStatus, database.QueryExecutor) *models.Token); ok {
		r0 = rf(tokenID, tokenStatus, executor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Token)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID, models.TokenStatus, database.QueryExecutor) error); ok {
		r1 = rf(tokenID, tokenStatus, executor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
