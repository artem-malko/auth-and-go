// Code generated by mockery v1.0.0. DO NOT EDIT.

package account

import (
	sql "database/sql"

	models "github.com/artem-malko/auth-and-go/models"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

// ConfirmAccount provides a mock function with given fields: accountID, tx
func (_m *MockService) ConfirmAccount(accountID uuid.UUID, tx *sql.Tx) (*models.Account, error) {
	ret := _m.Called(accountID, tx)

	var r0 *models.Account
	if rf, ok := ret.Get(0).(func(uuid.UUID, *sql.Tx) *models.Account); ok {
		r0 = rf(accountID, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID, *sql.Tx) error); ok {
		r1 = rf(accountID, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAccount provides a mock function with given fields: tx, email, accountStatus
func (_m *MockService) CreateAccount(tx *sql.Tx, email string, accountStatus models.AccountStatus) (*models.Account, error) {
	ret := _m.Called(tx, email, accountStatus)

	var r0 *models.Account
	if rf, ok := ret.Get(0).(func(*sql.Tx, string, models.AccountStatus) *models.Account); ok {
		r0 = rf(tx, email, accountStatus)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sql.Tx, string, models.AccountStatus) error); ok {
		r1 = rf(tx, email, accountStatus)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAccountWithOAuth provides a mock function with given fields: email, firstName, lastName, avatarURL, tx
func (_m *MockService) CreateAccountWithOAuth(email string, firstName string, lastName string, avatarURL string, tx *sql.Tx) (*models.Account, error) {
	ret := _m.Called(email, firstName, lastName, avatarURL, tx)

	var r0 *models.Account
	if rf, ok := ret.Get(0).(func(string, string, string, string, *sql.Tx) *models.Account); ok {
		r0 = rf(email, firstName, lastName, avatarURL, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string, *sql.Tx) error); ok {
		r1 = rf(email, firstName, lastName, avatarURL, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeactivateAccountByID provides a mock function with given fields: accountID, tx
func (_m *MockService) DeactivateAccountByID(accountID uuid.UUID, tx *sql.Tx) error {
	ret := _m.Called(accountID, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, *sql.Tx) error); ok {
		r0 = rf(accountID, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUnconfirmedAccountsByAccountIDs provides a mock function with given fields: accountIDs, tx
func (_m *MockService) DeleteUnconfirmedAccountsByAccountIDs(accountIDs []uuid.UUID, tx *sql.Tx) error {
	ret := _m.Called(accountIDs, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func([]uuid.UUID, *sql.Tx) error); ok {
		r0 = rf(accountIDs, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAccountByID provides a mock function with given fields: accountID
func (_m *MockService) GetAccountByID(accountID uuid.UUID) (*models.Account, error) {
	ret := _m.Called(accountID)

	var r0 *models.Account
	if rf, ok := ret.Get(0).(func(uuid.UUID) *models.Account); ok {
		r0 = rf(accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountByName provides a mock function with given fields: accountName
func (_m *MockService) GetAccountByName(accountName string) (*models.Account, error) {
	ret := _m.Called(accountName)

	var r0 *models.Account
	if rf, ok := ret.Get(0).(func(string) *models.Account); ok {
		r0 = rf(accountName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(accountName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginAccount provides a mock function with given fields: account, clientIP, tx
func (_m *MockService) LoginAccount(account uuid.UUID, clientIP string, tx *sql.Tx) (*models.Account, error) {
	ret := _m.Called(account, clientIP, tx)

	var r0 *models.Account
	if rf, ok := ret.Get(0).(func(uuid.UUID, string, *sql.Tx) *models.Account); ok {
		r0 = rf(account, clientIP, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID, string, *sql.Tx) error); ok {
		r1 = rf(account, clientIP, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAccountName provides a mock function with given fields: accountID, name
func (_m *MockService) UpdateAccountName(accountID uuid.UUID, name string) error {
	ret := _m.Called(accountID, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) error); ok {
		r0 = rf(accountID, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
