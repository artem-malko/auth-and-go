// Code generated by mockery v1.0.0. DO NOT EDIT.

package identity

import (
	sql "database/sql"

	models "github.com/artem-malko/auth-and-go/models"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

// ConfirmIdentity provides a mock function with given fields: identityID, tx
func (_m *MockService) ConfirmIdentity(identityID uuid.UUID, tx *sql.Tx) (*models.Identity, error) {
	ret := _m.Called(identityID, tx)

	var r0 *models.Identity
	if rf, ok := ret.Get(0).(func(uuid.UUID, *sql.Tx) *models.Identity); ok {
		r0 = rf(identityID, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Identity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID, *sql.Tx) error); ok {
		r1 = rf(identityID, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEmailIdentity provides a mock function with given fields: accountID, email, password, identityStatus, tx
func (_m *MockService) CreateEmailIdentity(accountID uuid.UUID, email string, password string, identityStatus models.IdentityStatus, tx *sql.Tx) (*models.Identity, error) {
	ret := _m.Called(accountID, email, password, identityStatus, tx)

	var r0 *models.Identity
	if rf, ok := ret.Get(0).(func(uuid.UUID, string, string, models.IdentityStatus, *sql.Tx) *models.Identity); ok {
		r0 = rf(accountID, email, password, identityStatus, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Identity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID, string, string, models.IdentityStatus, *sql.Tx) error); ok {
		r1 = rf(accountID, email, password, identityStatus, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOAuthIdentity provides a mock function with given fields: accountID, socialID, socialNetworkType, email, tx
func (_m *MockService) CreateOAuthIdentity(accountID uuid.UUID, socialID string, socialNetworkType models.SocialNetworkType, email string, tx *sql.Tx) (*models.Identity, error) {
	ret := _m.Called(accountID, socialID, socialNetworkType, email, tx)

	var r0 *models.Identity
	if rf, ok := ret.Get(0).(func(uuid.UUID, string, models.SocialNetworkType, string, *sql.Tx) *models.Identity); ok {
		r0 = rf(accountID, socialID, socialNetworkType, email, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Identity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID, string, models.SocialNetworkType, string, *sql.Tx) error); ok {
		r1 = rf(accountID, socialID, socialNetworkType, email, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteIdentitiesByAccountID provides a mock function with given fields: accountID, tx
func (_m *MockService) DeleteIdentitiesByAccountID(accountID uuid.UUID, tx *sql.Tx) error {
	ret := _m.Called(accountID, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, *sql.Tx) error); ok {
		r0 = rf(accountID, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteIdentitiesByIdentityIDs provides a mock function with given fields: identityIDs, tx
func (_m *MockService) DeleteIdentitiesByIdentityIDs(identityIDs []uuid.UUID, tx *sql.Tx) error {
	ret := _m.Called(identityIDs, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func([]uuid.UUID, *sql.Tx) error); ok {
		r0 = rf(identityIDs, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetEmailIdentityByEmail provides a mock function with given fields: email
func (_m *MockService) GetEmailIdentityByEmail(email string) (*models.Identity, error) {
	ret := _m.Called(email)

	var r0 *models.Identity
	if rf, ok := ret.Get(0).(func(string) *models.Identity); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Identity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEmailIdentityByEmailAndPassword provides a mock function with given fields: email, password
func (_m *MockService) GetEmailIdentityByEmailAndPassword(email string, password string) (*models.Identity, error) {
	ret := _m.Called(email, password)

	var r0 *models.Identity
	if rf, ok := ret.Get(0).(func(string, string) *models.Identity); ok {
		r0 = rf(email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Identity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIdentitiesByAccountID provides a mock function with given fields: accountID
func (_m *MockService) GetIdentitiesByAccountID(accountID uuid.UUID) ([]*models.Identity, error) {
	ret := _m.Called(accountID)

	var r0 []*models.Identity
	if rf, ok := ret.Get(0).(func(uuid.UUID) []*models.Identity); ok {
		r0 = rf(accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Identity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIdentitiesByEmail provides a mock function with given fields: email
func (_m *MockService) GetIdentitiesByEmail(email string) ([]*models.Identity, error) {
	ret := _m.Called(email)

	var r0 []*models.Identity
	if rf, ok := ret.Get(0).(func(string) []*models.Identity); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Identity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIdentityBySocialID provides a mock function with given fields: socialID, socialNetworkType
func (_m *MockService) GetIdentityBySocialID(socialID string, socialNetworkType models.SocialNetworkType) (*models.Identity, error) {
	ret := _m.Called(socialID, socialNetworkType)

	var r0 *models.Identity
	if rf, ok := ret.Get(0).(func(string, models.SocialNetworkType) *models.Identity); ok {
		r0 = rf(socialID, socialNetworkType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Identity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, models.SocialNetworkType) error); ok {
		r1 = rf(socialID, socialNetworkType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
