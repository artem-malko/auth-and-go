// Code generated by mockery v1.0.0. DO NOT EDIT.

package mailer

import (
	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

// SendEmail provides a mock function with given fields: priority, email
func (_m *MockService) SendEmail(priority EmailPriority, email Email) error {
	ret := _m.Called(priority, email)

	var r0 error
	if rf, ok := ret.Get(0).(func(EmailPriority, Email) error); ok {
		r0 = rf(priority, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendRegistrationConfirmationEmail provides a mock function with given fields: email, confirmationToken
func (_m *MockService) SendRegistrationConfirmationEmail(email string, confirmationToken uuid.UUID) error {
	ret := _m.Called(email, confirmationToken)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, uuid.UUID) error); ok {
		r0 = rf(email, confirmationToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendRegistrationConfirmedEmail provides a mock function with given fields: email, name, username
func (_m *MockService) SendRegistrationConfirmedEmail(email string, name string, username string) error {
	ret := _m.Called(email, name, username)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(email, name, username)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendUnexpectedRegistrationEmail provides a mock function with given fields: email, name, username
func (_m *MockService) SendUnexpectedRegistrationEmail(email string, name string, username string) error {
	ret := _m.Called(email, name, username)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(email, name, username)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
