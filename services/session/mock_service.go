// Code generated by mockery v1.0.0. DO NOT EDIT.

package session

import (
	sql "database/sql"

	models "github.com/artem-malko/auth-and-go/models"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

// CreateSession provides a mock function with given fields: accountID, identityID, clientID, tx
func (_m *MockService) CreateSession(accountID uuid.UUID, identityID uuid.UUID, clientID models.ClientID, tx *sql.Tx) (*models.Session, error) {
	ret := _m.Called(accountID, identityID, clientID, tx)

	var r0 *models.Session
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID, models.ClientID, *sql.Tx) *models.Session); ok {
		r0 = rf(accountID, identityID, clientID, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Session)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID, uuid.UUID, models.ClientID, *sql.Tx) error); ok {
		r1 = rf(accountID, identityID, clientID, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAllSessionsByAccountID provides a mock function with given fields: accountID, tx
func (_m *MockService) DeleteAllSessionsByAccountID(accountID uuid.UUID, tx *sql.Tx) error {
	ret := _m.Called(accountID, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, *sql.Tx) error); ok {
		r0 = rf(accountID, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteExpiredSessions provides a mock function with given fields:
func (_m *MockService) DeleteExpiredSessions() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSessionBySessionID provides a mock function with given fields: sessionID
func (_m *MockService) DeleteSessionBySessionID(sessionID uuid.UUID) error {
	ret := _m.Called(sessionID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(sessionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSessionByAccessToken provides a mock function with given fields: accessToken
func (_m *MockService) GetSessionByAccessToken(accessToken uuid.UUID) (*models.Session, error) {
	ret := _m.Called(accessToken)

	var r0 *models.Session
	if rf, ok := ret.Get(0).(func(uuid.UUID) *models.Session); ok {
		r0 = rf(accessToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Session)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefreshSession provides a mock function with given fields: refreshToken
func (_m *MockService) RefreshSession(refreshToken uuid.UUID) (*models.Session, error) {
	ret := _m.Called(refreshToken)

	var r0 *models.Session
	if rf, ok := ret.Get(0).(func(uuid.UUID) *models.Session); ok {
		r0 = rf(refreshToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Session)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(refreshToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
